{"version":3,"sources":["lib/styles/palette.js","components/auth/AuthTemplate.js","modules/loading.js","lib/createRequestSaga.js","lib/api/client.js","lib/api/auth.js","modules/auth.js","components/common/Button.js","components/auth/AuthForm.js","modules/user.js","containers/auth/LoginForm.js","pages/LoginPage.js","components/common/Responsive.js","components/common/Header.js","containers/common/HeaderContainer.js","components/post/Pagination.js","containers/posts/PaginationContainer.js","components/common/SubInfo.js","components/common/Tags.js","components/post/PostList.js","modules/posts.js","lib/api/posts.js","containers/posts/PostListContainer.js","pages/PostListPage.js","modules/post.js","components/post/PostViewer.js","components/common/AskModal.js","components/post/AskRemoveModal.js","components/post/PostActionButtons.js","modules/write.js","containers/post/PostViewerContainer.js","pages/PostPage.js","containers/auth/RegisterForm.js","pages/RegisterPage.js","components/write/Editor.js","containers/write/EditorContainer.js","components/write/TagBox.js","containers/write/TagBoxContainer.js","components/write/WriteActionButton.js","containers/write/WriteActionButtonsContainer.js","pages/WritePage.js","App.js","reportWebVitals.js","modules/index.js","index.js"],"names":["palette","gray","cyan","AuthTemplateBlock","styled","div","WhiteBox","AuthTemplate","children","className","to","START_LOADING","FINISH_LOADING","startLoading","createAction","requestType","finishLoading","loading","handleActions","state","action","payload","createRequestActionTypes","type","createRequestSaga","request","SUCCESS","FAILURE","put","call","response","data","meta","error","client","axios","create","logout","post","authSaga","CHANGE_FIELD","INITIALIZE_FORM","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","changeField","form","key","value","initializeForm","register","username","password","login","registerSaga","loginSaga","takeLatest","initialState","passwordConfirm","auth","authError","produce","draft","buttonStyle","css","props","fullWidth","StyledButton","button","StyledLink","Link","Button","console","log","AuthFormBlock","StyledInput","input","Footer","ButtonWithMarginTop","textMap","ErrorMessage","AuthForm","onChange","onSubmit","text","autoComplete","name","placeholder","style","marginTop","logoutSaga","userSaga","TEMP_SET_USER","CHECK","CHECK_SUCCESS","CHECK_FAILURE","LOGOUT","tempSetUser","user","check","checkSaga","get","checkFailureSaga","localStorage","removeItem","e","authAPI","checkError","withRouter","history","useState","setError","dispatch","useDispatch","useSelector","useEffect","push","setItem","JSON","stringify","target","preventDefault","LoginPage","ResponsiveBlock","Responsive","rest","HeaderBlock","Wrapper","Spacer","UserInfo","Header","onLogout","onClick","HeaderContainer","PaginationBlock","PageNumber","buildLink","tag","page","query","qs","Pagination","lastPage","disabled","undefined","location","match","posts","params","parse","search","ignoreQueryPrefix","parseInt","SubInfoBlock","hasMarginTop","SubInfo","publishedDate","Date","toLocaleDateString","TagsBlock","Tags","tags","map","PostListBlock","WritePostButtonWrapper","PostItemBlock","PostItem","title","body","_id","PostList","showWriteButton","postsSaga","LIST_POSTS","LIST_POSTS_SUCCESS","LIST_POSTS_FAILURE","listPosts","listPostsSaga","queryString","headers","PostListPage","postSaga","READ_POST","READ_POST_SUCCESS","READ_POST_FAILURE","UNLOAD_POST","readPost","id","unloadPost","readPostSaga","PostViewerBlock","PostHead","PostContent","PostViewer","actionButtons","status","dangerouslySetInnerHTML","__html","Fullscreen","AskModalBlock","AskModal","visible","description","confirmText","cancelText","onConfirm","onCancel","AskRemoveModal","PostActionButtonsBlock","ActionButton","PostActionButtons","onEdit","onRemove","modal","setModal","writeSaga","INITIALIZE","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","SET_ORIGINAL_POST","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","initialize","writePost","setOriginalPost","updatePost","writePostSaga","updatePostSaga","patch","postError","originalPostId","write","postId","a","delete","ownPost","PostPage","includes","RegisterPage","EditorBlock","TitleInput","QuillWrapper","Editor","onChangeField","quillElement","useRef","quillInstance","current","Quill","theme","modules","toolbar","header","list","quill","on","delta","oldDelta","source","root","innerHTML","mounted","ref","EditorContainer","useCallback","TagBoxBlock","TagForm","Tag","TagListBlock","TagItem","React","memo","TagList","TagBox","onChangeTags","setInput","localTags","setLocalTags","insertTag","nextTags","filter","t","trim","TagBoxContainer","WriteActionButtonBlock","WriteActionButton","onPublish","isEdit","goback","WritePage","App","component","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootSaga","all","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","getItem","loadUser","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82de536e.chunk.js","sourcesContent":["// source: https://yeun.github.io/open-color/\r\nconst palette = {\r\n    gray: [\r\n      '#f8f9fa',\r\n      '#f1f3f5',\r\n      '#e9ecef',\r\n      '#dee2e6',\r\n      '#ced4da',\r\n      '#adb5bd',\r\n      '#868e96',\r\n      '#495057',\r\n      '#343a40',\r\n      '#212529'\r\n    ],\r\n    cyan: [\r\n      '#e3fafc',\r\n      '#c5f6fa',\r\n      '#99e9f2',\r\n      '#66d9e8',\r\n      '#3bc9db',\r\n      '#22b8cf',\r\n      '#15aabf',\r\n      '#1098ad',\r\n      '#0c8599',\r\n      '#0b7285'\r\n    ]\r\n  };\r\n  \r\n  export default palette;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport { Link } from 'react-router-dom';\r\n\r\n/**\r\n * 회원가입 / 로그인 페이지의 레이아웃을 담당하는 컴포넌트입니다.\r\n */\r\n\r\n/* 화면 전체를 채움 */\r\nconst AuthTemplateBlock = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n  right: 0;\r\n  background: ${palette.gray[2]};\r\n  /* flex로 내부 내용 중앙 정렬 */\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\n/* 흰색 박스 */\r\nconst WhiteBox = styled.div`\r\n  .logo-area {\r\n    display: block;\r\n    padding-bottom: 2rem;\r\n    text-align: center;\r\n    font-weight: bold;\r\n    letter-spacing: 2px;\r\n  }\r\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.025);\r\n  padding: 2rem;\r\n  width: 360px;\r\n  background: white;\r\n  border-radius: 2px;\r\n`;\r\n\r\nconst AuthTemplate = ({ children }) => {\r\n  return (\r\n    <AuthTemplateBlock>\r\n      <WhiteBox>\r\n        <div className=\"logo-area\">\r\n          <Link to=\"/\">REACTERS</Link>\r\n        </div>\r\n        {children}\r\n      </WhiteBox>\r\n    </AuthTemplateBlock>\r\n  );\r\n};\r\n\r\nexport default AuthTemplate;\r\n","import { createAction, handleActions } from 'redux-actions';\r\n\r\nconst START_LOADING = 'loading/START_LOADING';\r\nconst FINISH_LOADING = 'loading/FINISH_LOADING';\r\n\r\n/*\r\n 요청을 위한 액션 타입을 payload로 설정합니다 (예: \"sample/GET_POST\")\r\n*/\r\n\r\nexport const startLoading = createAction(\r\n  START_LOADING,\r\n  (requestType) => requestType,\r\n);\r\n\r\nexport const finishLoading = createAction(\r\n  FINISH_LOADING,\r\n  (requestType) => requestType,\r\n);\r\n\r\nconst initialState = {};\r\n\r\nconst loading = handleActions(\r\n  {\r\n    [START_LOADING]: (state, action) => ({\r\n      ...state,\r\n      [action.payload]: true,\r\n    }),\r\n    [FINISH_LOADING]: (state, action) => ({\r\n      ...state,\r\n      [action.payload]: false,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default loading;\r\n","import { call, put } from 'redux-saga/effects';\r\nimport { startLoading, finishLoading } from '../modules/loading';\r\n\r\nexport const createRequestActionTypes = (type) => {\r\n  const SUCCESS = `${type}_SUCCESS`;\r\n  const FAILURE = `${type}_FAILURE`;\r\n  return [type, SUCCESS, FAILURE];\r\n};\r\n\r\nexport default function createRequestSaga(type, request) {\r\n  const SUCCESS = `${type}_SUCCESS`;\r\n  const FAILURE = `${type}_FAILURE`;\r\n\r\n  return function* (action) {\r\n    yield put(startLoading(type)); // 로딩 시작\r\n    try {\r\n      const response = yield call(request, action.payload);\r\n      yield put({\r\n        type: SUCCESS,\r\n        payload: response.data,\r\n        meta: response, // http 헤더 밑 상태 코드를 쉽게 조회 할 수 있다\r\n      });\r\n    } catch (e) {\r\n      yield put({\r\n        type: FAILURE,\r\n        payload: e,\r\n        error: true,\r\n      });\r\n    }\r\n    yield put(finishLoading(type)); // 로딩 끝\r\n  };\r\n}\r\n","import axios from 'axios';\r\n\r\nconst client = axios.create();\r\n\r\n/*\r\n  글로벌 설정 예시:\r\n  \r\n  // API 주소를 다른 곳으로 사용함\r\n  client.defaults.baseURL = 'https://external-api-server.com/' \r\n  // 헤더 설정\r\n  client.defaults.headers.common['Authorization'] = 'Bearer a1b2c3d4';\r\n  // 인터셉터 설정\r\n  axios.intercepter.response.use(\\\r\n    response => {\r\n      // 요청 성공 시 특정 작업 수행\r\n      return response;\r\n    }, \r\n    error => {\r\n      // 요청 실패 시 특정 작업 수행\r\n      return Promise.reject(error);\r\n    }\r\n  })  \r\n*/\r\n\r\nexport default client;\r\n","import client from './client';\r\n\r\n// 로그인\r\nexport const login = ({ username, password }) =>\r\n  client.post('/api/auth/login', { username, password });\r\n\r\n// 회원가입\r\nexport const register = ({ username, password }) =>\r\n  client.post('/api/auth/register', { username, password });\r\n\r\n// 로그인 상태 확인\r\nexport const check = () => client.get('/api/auth/check');\r\n\r\n// 로그아웃\r\nexport const logout = () => client.post('/api/auth/logout');\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport produce from 'immer';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as authAPI from '../lib/api/auth';\r\n\r\nconst CHANGE_FIELD = 'auth/CHANGE_FIELD';\r\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\r\n\r\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes(\r\n  'auth/REGISTER',\r\n);\r\n\r\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes(\r\n  'auth/LOGIN',\r\n);\r\n\r\nexport const changeField = createAction(\r\n  CHANGE_FIELD,\r\n  ({ form, key, value }) => ({\r\n    form, // register , login\r\n    key, // username, password, passwordConfirm\r\n    value, // 실제 바꾸려는 값\r\n  }),\r\n);\r\nexport const initializeForm = createAction(INITIALIZE_FORM, (form) => form); // register / login\r\nexport const register = createAction(REGISTER, ({ username, password }) => ({\r\n  username,\r\n  password,\r\n}));\r\nexport const login = createAction(LOGIN, ({ username, password }) => ({\r\n  username,\r\n  password,\r\n}));\r\n\r\n// saga 생성\r\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\r\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\r\nexport function* authSaga() {\r\n  yield takeLatest(REGISTER, registerSaga);\r\n  yield takeLatest(LOGIN, loginSaga);\r\n}\r\n\r\nconst initialState = {\r\n  register: {\r\n    username: '',\r\n    password: '',\r\n    passwordConfirm: '',\r\n  },\r\n  login: {\r\n    username: '',\r\n    password: '',\r\n  },\r\n  auth: null,\r\n  authError: null,\r\n};\r\n\r\nconst auth = handleActions(\r\n  {\r\n    [CHANGE_FIELD]: (state, { payload: { form, key, value } }) =>\r\n      produce(state, (draft) => {\r\n        draft[form][key] = value; // 예: state.register.username을 바꾼다\r\n      }),\r\n    [INITIALIZE_FORM]: (state, { payload: form }) => ({\r\n      ...state,\r\n      [form]: initialState[form],\r\n      authError: null, // 폼 전환 시 회원 인증 에러 초기화\r\n    }),\r\n    // 회원가입 성공\r\n    [REGISTER_SUCCESS]: (state, { payload: auth }) => ({\r\n      ...state,\r\n      authError: null,\r\n      auth,\r\n    }),\r\n    // 회원가입 실패\r\n    [REGISTER_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      authError: error,\r\n    }),\r\n    // 로그인 성공\r\n    [LOGIN_SUCCESS]: (state, { payload: auth }) => ({\r\n      ...state,\r\n      authError: null,\r\n      auth,\r\n    }),\r\n    // 로그인 실패\r\n    [LOGIN_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      authError: error,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default auth;\r\n","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport palette from '../../lib/styles/palette';\r\n\r\nconst buttonStyle = css`\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n  padding: 0.25rem 1rem;\r\n  color: white;\r\n  outline: none;\r\n  cursor: pointer;\r\n  background: ${palette.gray[8]};\r\n  &:hover {\r\n    background: ${palette.gray[6]};\r\n  }\r\n  ${(props) =>\r\n    props.fullWidth &&\r\n    css`\r\n      padding-top: 0.75rem;\r\n      padding-bottom: 0.75rem;\r\n      width: 100%;\r\n      font-size: 1.125rem;\r\n    `}\r\n  ${(props) =>\r\n    props.cyan &&\r\n    css`\r\n      background: ${palette.cyan[5]};\r\n      &:hover {\r\n        background: ${palette.cyan[4]};\r\n      }\r\n    `}\r\n\r\n    &:disabled {\r\n    background: ${palette.gray[3]};\r\n    color: ${palette.gray[5]};\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\n  ${buttonStyle}\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n  ${buttonStyle}\r\n`;\r\n\r\nconst Button = (props) => {\r\n  console.log(props);\r\n  return props.to ? (\r\n    // 숫자/문자열만 허용하기 때문에 삼항 연산자를 사용해 나타냄\r\n    <StyledLink {...props} cyan={props.cyan ? 1 : 0} />\r\n  ) : (\r\n    <StyledButton {...props} />\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport palette from '../../lib/styles/palette';\r\nimport Button from '../common/Button';\r\n\r\n/**\r\n * 회원가입 또는 로그인 폼을 보여줍니다.\r\n */\r\n\r\nconst AuthFormBlock = styled.div`\r\n  h3 {\r\n    margin: 0;\r\n    color: ${palette.gray[8]};\r\n    margin-bottom: 1rem;\r\n  }\r\n`;\r\n\r\n/**\r\n * 스타일링된 input\r\n */\r\nconst StyledInput = styled.input`\r\n  font-size: 1rem;\r\n  border: none;\r\n  border-bottom: 1px solid ${palette.gray[5]};\r\n  padding-bottom: 0.5rem;\r\n  outline: none;\r\n  width: 100%;\r\n  &:focus {\r\n    color: $oc-teal-7;\r\n    border-bottom: 1px solid ${palette.gray[7]};\r\n  }\r\n  & + & {\r\n    margin-top: 1rem;\r\n  }\r\n`;\r\n\r\n/**\r\n * 폼 하단에 로그인 혹은 회원가입 링크를 보여줌\r\n */\r\nconst Footer = styled.div`\r\n  margin-top: 2rem;\r\n  text-align: right;\r\n  a {\r\n    color: ${palette.gray[6]};\r\n    text-decoration: underline;\r\n    &:hover {\r\n      color: ${palette.gray[9]};\r\n    }\r\n  }\r\n`;\r\n\r\nconst ButtonWithMarginTop = styled(Button)`\r\n  margin-top: 1rem;\r\n`;\r\n\r\nconst textMap = {\r\n  login: '로그인',\r\n  register: '회원가입',\r\n};\r\n\r\n/**\r\n * 에러를 보여줍니다\r\n */\r\nconst ErrorMessage = styled.div`\r\n  color: red;\r\n  text-align: center;\r\n  font-size: 0.875rem;\r\n  margin-top: 1rem;\r\n`;\r\n\r\nconst AuthForm = ({ type, form, onChange, onSubmit, error }) => {\r\n  const text = textMap[type];\r\n  return (\r\n    <AuthFormBlock>\r\n      <h3>{text}</h3>\r\n      <form onSubmit={onSubmit}>\r\n        <StyledInput\r\n          autoComplete=\"username\"\r\n          name=\"username\"\r\n          placeholder=\"아이디\"\r\n          onChange={onChange}\r\n          value={form.username}\r\n        />\r\n        <StyledInput\r\n          autoComplete=\"new-password\"\r\n          name=\"password\"\r\n          placeholder=\"비밀번호\"\r\n          type=\"password\"\r\n          onChange={onChange}\r\n          value={form.password}\r\n        />\r\n        {type === 'register' && (\r\n          <StyledInput\r\n            autoComplete=\"new-password\"\r\n            name=\"passwordConfirm\"\r\n            placeholder=\"비밀번호 확인\"\r\n            type=\"password\"\r\n            onChange={onChange}\r\n            value={form.passwordConfirm}\r\n          />\r\n        )}\r\n        {error && <ErrorMessage>{error}</ErrorMessage>}\r\n        <ButtonWithMarginTop cyan fullWidth style={{ marginTop: '1rem' }}>\r\n          {text}\r\n        </ButtonWithMarginTop>\r\n      </form>\r\n      <Footer>\r\n        {type === 'login' ? (\r\n          <Link to=\"/register\">회원가입</Link>\r\n        ) : (\r\n          <Link to=\"/login\">로그인</Link>\r\n        )}\r\n      </Footer>\r\n    </AuthFormBlock>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport { takeLatest, call } from 'redux-saga/effects';\r\nimport * as authAPI from '../lib/api/auth';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\n\r\nconst TEMP_SET_USER = 'user/TEMP_SET_USER'; // 새로고침 이후 임시 로그인 처리\r\n// 회원 정보 확인\r\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] = createRequestActionTypes(\r\n  'user/CHECK',\r\n);\r\nconst LOGOUT = 'user/LOGOUT';\r\n\r\nexport const tempSetUser = createAction(TEMP_SET_USER, (user) => user);\r\nexport const check = createAction(CHECK);\r\nexport const logout = createAction(LOGOUT);\r\n\r\nconst checkSaga = createRequestSaga(CHECK, authAPI.check);\r\n\r\nfunction checkFailureSaga() {\r\n  try {\r\n    localStorage.removeItem('user'); // localStorage에서 user를 제거\r\n  } catch (e) {\r\n    console.log('localStorage removeItem');\r\n  }\r\n}\r\n\r\nfunction* logoutSaga() {\r\n  try {\r\n    yield call(authAPI.logout); // logout API 호출\r\n    localStorage.removeItem('user'); // localStorage에서 user를 제거\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\nexport function* userSaga() {\r\n  yield takeLatest(CHECK, checkSaga);\r\n  yield takeLatest(CHECK_FAILURE, checkFailureSaga);\r\n  yield takeLatest(LOGOUT, logoutSaga);\r\n}\r\n\r\nconst initialState = {\r\n  user: null,\r\n  checkError: null,\r\n};\r\n\r\nexport default handleActions(\r\n  {\r\n    [TEMP_SET_USER]: (state, { payload: user }) => ({\r\n      ...state,\r\n      user,\r\n    }),\r\n    [CHECK_SUCCESS]: (state, { payload: user }) => ({\r\n      ...state,\r\n      user,\r\n      checkError: null,\r\n    }),\r\n    [CHECK_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      user: null,\r\n      checkError: error,\r\n    }),\r\n    [LOGOUT]: (state) => ({\r\n      ...state,\r\n      user: null,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { changeField, initializeForm, login } from '../../modules/auth';\r\nimport AuthForm from '../../components/auth/AuthForm';\r\nimport { check } from '../../modules/user';\r\n\r\nconst LoginForm = ({ history }) => {\r\n  const [error, setError] = useState(null);\r\n  const dispatch = useDispatch();\r\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\r\n    form: auth.login,\r\n    auth: auth.auth,\r\n    authError: auth.authError,\r\n    user: user.user,\r\n  }));\r\n  // 인풋 변경 이벤트 핸들러\r\n  const onChange = (e) => {\r\n    const { value, name } = e.target;\r\n    dispatch(\r\n      changeField({\r\n        form: 'login',\r\n        key: name,\r\n        value,\r\n      }),\r\n    );\r\n  };\r\n\r\n  // 폼 등록 이벤트 핸들러\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { username, password } = form;\r\n    dispatch(login({ username, password }));\r\n  };\r\n\r\n  // 컴포넌트가 처음 렌더링 될 때 form 을 초기화함\r\n  useEffect(() => {\r\n    dispatch(initializeForm('login'));\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (authError) {\r\n      console.log('오류 발생');\r\n      console.log(authError);\r\n      setError('로그인 실패');\r\n      return;\r\n    }\r\n    if (auth) {\r\n      console.log('로그인 성공');\r\n      dispatch(check());\r\n    }\r\n  }, [auth, authError, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      history.push('/');\r\n      try {\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n      } catch (e) {\r\n        console.log('localStorage is not working');\r\n      }\r\n    }\r\n  }, [history, user]);\r\n\r\n  return (\r\n    <AuthForm\r\n      type=\"login\"\r\n      form={form}\r\n      onChange={onChange}\r\n      onSubmit={onSubmit}\r\n      error={error}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(LoginForm);\r\n","import React from 'react';\r\nimport AuthTemplate from '../components/auth/AuthTemplate';\r\nimport LoginForm from '../containers/auth/LoginForm';\r\n\r\nconst LoginPage = () => {\r\n  return (\r\n    <AuthTemplate>\r\n      <LoginForm />\r\n    </AuthTemplate>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ResponsiveBlock = styled.div`\r\n  padding-left: 1rem;\r\n  padding-right: 1rem;\r\n  width: 1024px;\r\n  margin: 0 auto; /* 중앙 정렬 */\r\n  /* 브라우저 크기에 따라 가로 사이즈 변경 */\r\n  @media (max-width: 1024px) {\r\n    width: 768px;\r\n  }\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst Responsive = ({ children, ...rest }) => {\r\n  // style, className, onClick, onMouseMove 등의 props를 사용할 수 있도록\r\n  // ...rest를 사용하여 ResponsiveBlock에게 전달\r\n  return <ResponsiveBlock {...rest}>{children}</ResponsiveBlock>;\r\n};\r\n\r\nexport default Responsive;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport Responsive from './Responsive';\r\nimport Button from './Button';\r\n\r\nconst HeaderBlock = styled.div`\r\n  position: fixed;\r\n  width: 100%;\r\n  background: white;\r\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.08);\r\n`;\r\n\r\n/**\r\n * Responsive 컴포넌트의 속성에 스타일을 추가해서 새로운 컴포넌트 생성\r\n */\r\nconst Wrapper = styled(Responsive)`\r\n  height: 4rem;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between; /* 자식 엘리먼트 사이에 여백을 최대로 설정 */\r\n  .logo {\r\n    font-size: 1.125rem;\r\n    font-weight: 800;\r\n    letter-spacing: 2px;\r\n  }\r\n  .right {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\n/**\r\n * 헤더가 fixed로 되어 있기 때문에 페이지의 컨텐츠가 4rem 아래 나타나도록 해주는 컴포넌트\r\n */\r\nconst Spacer = styled.div`\r\n  height: 4rem;\r\n`;\r\n\r\nconst UserInfo = styled.div`\r\n  font-weight: 800;\r\n  margin-right: 1rem;\r\n`;\r\n\r\nconst Header = ({ user, onLogout }) => {\r\n  return (\r\n    <>\r\n      <HeaderBlock>\r\n        <Wrapper>\r\n          <Link to=\"/\" className=\"logo\">\r\n            REACTERS\r\n          </Link>\r\n          {user ? (\r\n            <div className=\"right\">\r\n              <UserInfo>{user.username}</UserInfo>\r\n              <Button onClick={onLogout}>로그아웃</Button>\r\n            </div>\r\n          ) : (\r\n            <div className=\"right\">\r\n              <Button to=\"/login\">로그인</Button>\r\n            </div>\r\n          )}\r\n        </Wrapper>\r\n      </HeaderBlock>\r\n      <Spacer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Header from '../../components/common/Header';\r\nimport { logout } from '../../modules/user';\r\n\r\nconst HeaderContainer = () => {\r\n  const { user } = useSelector(({ user }) => ({ user: user.user }));\r\n  const dispatch = useDispatch();\r\n  const onLogout = () => {\r\n    dispatch(logout());\r\n  };\r\n  return <Header user={user} onLogout={onLogout} />;\r\n};\r\n\r\nexport default HeaderContainer;\r\n","import React from 'react';\r\nimport qs from 'qs';\r\nimport styled from 'styled-components';\r\nimport Button from '../common/Button';\r\n\r\n// props로 현재 선택된 계정명, 태그, 현재 페이지 숫자, 마지막 페이지 숫자를 가져온다\r\n\r\nconst PaginationBlock = styled.div`\r\n  width: 320px;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 3rem;\r\n  padding-bottom: 5rem;\r\n`;\r\n\r\nconst PageNumber = styled.div``;\r\n\r\nconst buildLink = ({ username, tag, page }) => {\r\n  const query = qs.stringify({ tag, page });\r\n  return username ? `/@${username}?${query}` : `/?${query}`;\r\n};\r\n\r\nconst Pagination = ({ page, lastPage, tag, username }) => {\r\n  return (\r\n    <PaginationBlock>\r\n      <Button\r\n        disabled={page === 1}\r\n        to={\r\n          page === 1 ? undefined : buildLink({ username, tag, page: page - 1 })\r\n        }\r\n      >\r\n        이전\r\n      </Button>\r\n      <PageNumber>{page}</PageNumber>\r\n      <Button\r\n        disabled={page === lastPage}\r\n        to={\r\n          page === lastPage\r\n            ? undefined\r\n            : buildLink({ username, tag, page: page + 1 })\r\n        }\r\n      >\r\n        다음\r\n      </Button>\r\n    </PaginationBlock>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport qs from 'qs';\r\nimport Pagination from '../../components/post/Pagination';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst PaginationContainer = ({ location, match }) => {\r\n  const { lastPage, posts, loading } = useSelector(({ posts, loading }) => ({\r\n    lastPage: posts.lastPage,\r\n    posts: posts.posts,\r\n    loading: loading['post/LIST_POSTS'],\r\n  }));\r\n\r\n  // 포스트 데이터가 없거나 로딩 중이라면 아무것도 보여주지 않음\r\n  if (!posts || loading) return null;\r\n\r\n  const { username } = match.params;\r\n\r\n  // page가 없으면 기본값 1\r\n  const { tag, page = 1 } = qs.parse(location.search, {\r\n    ignoreQueryPrefix: true,\r\n  });\r\n  return (\r\n    <Pagination\r\n      tag={tag}\r\n      username={username}\r\n      page={parseInt(page, 10)}\r\n      lastPage={lastPage}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(PaginationContainer);\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport styled, { css } from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\n\r\n// hasMarginTop 값이 true 이면 상단 여백을 주고 , false라면 여백 없다\r\n\r\nconst SubInfoBlock = styled.div`\r\n  ${(props) =>\r\n    props.hasMarginTop &&\r\n    css`\r\n      margin-top: 1rem;\r\n    `}\r\n  color: ${palette.gray[6]};\r\n\r\n  /* span 사이에 가운뎃점 문자 보여 주기 */\r\n  span + span:before {\r\n    color: ${palette.gray[4]};\r\n    padding-left: 0.25rem;\r\n    padding-right: 0.25rem;\r\n    content: '\\\\B7'; /* 가운뎃점 문자 */\r\n  }\r\n`;\r\n\r\nconst SubInfo = ({ username, publishedDate, hasMarginTop }) => {\r\n  return (\r\n    <SubInfoBlock hasMarginTop={hasMarginTop}>\r\n      <span>\r\n        <b>\r\n          <Link to={`/@${username}`}>{username}</Link>\r\n        </b>\r\n      </span>\r\n      <span>{new Date(publishedDate).toLocaleDateString()}</span>\r\n    </SubInfoBlock>\r\n  );\r\n};\r\n\r\nexport default SubInfo;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\n\r\n// tags 값을 props로 받아와서 태그 목록을 렌더링\r\n\r\nconst TagsBlock = styled.div`\r\n  margin-top: 0.5rem;\r\n  .tag {\r\n    display: inline-block;\r\n    color: ${palette.gray[7]};\r\n    text-decoration: none;\r\n    margin-right: 0.5rem;\r\n    &:hover {\r\n      color: ${palette.gray[6]};\r\n    }\r\n  }\r\n`;\r\n\r\nconst Tags = ({ tags }) => {\r\n  return (\r\n    <TagsBlock>\r\n      {tags.map((tag) => (\r\n        <Link className=\"tag\" to={`/?tag=${tag}`} key={tag}>\r\n          #{tag}\r\n        </Link>\r\n      ))}\r\n    </TagsBlock>\r\n  );\r\n};\r\n\r\nexport default Tags;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport Button from '../common/Button';\r\nimport Responsive from '../common/Responsive';\r\nimport SubInfo from '../common/SubInfo';\r\nimport Tags from '../common/Tags';\r\n\r\nconst PostListBlock = styled(Responsive)`\r\n  margin-top: 3rem;\r\n`;\r\n\r\nconst WritePostButtonWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-bottom: 3rem;\r\n`;\r\n\r\nconst PostItemBlock = styled.div`\r\n  padding-top: 3rem;\r\n  padding-bottom: 3rem;\r\n  /* 맨 위 포스트는 padding-top 없듬*/\r\n\r\n  &:first-child {\r\n    padding-top: 0;\r\n  }\r\n  & + & {\r\n    border-top: 1px solid ${palette.gray[2]};\r\n  }\r\n  h2 {\r\n    font-size: 2rem;\r\n    margin-bottom: 0;\r\n    &:hover {\r\n      color: ${palette.gray[6]};\r\n    }\r\n  }\r\n  p {\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nconst PostItem = ({ post }) => {\r\n  const { publishedDate, user, tags, title, body, _id } = post;\r\n  return (\r\n    <PostItemBlock>\r\n      <h2>\r\n        <Link to={`/@${user.username}/${_id}`}>{title}</Link>\r\n      </h2>\r\n      <SubInfo\r\n        username={user.username}\r\n        publishedDate={new Date(publishedDate)}\r\n      />\r\n      <Tags tags={tags} />\r\n      <p>{body}</p>\r\n    </PostItemBlock>\r\n  );\r\n};\r\n\r\nconst PostList = ({ posts, loading, error, showWriteButton }) => {\r\n  // 에러 발생시\r\n  if (error) {\r\n    return <PostListBlock>에러 발생</PostListBlock>;\r\n  }\r\n  return (\r\n    <PostListBlock>\r\n      <WritePostButtonWrapper>\r\n        {showWriteButton && (\r\n          <Button cyan to=\"/write\">\r\n            새 글 작성하기\r\n          </Button>\r\n        )}\r\n      </WritePostButtonWrapper>\r\n      {/* 로딩 중이 아니고, 포스트 배열이 존재할 때만 보여 줌 */}\r\n      {!loading && posts && (\r\n        <div>\r\n          {posts.map((post) => (\r\n            <PostItem post={post} key={post._id} />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </PostListBlock>\r\n  );\r\n};\r\n\r\nexport default PostList;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport * as postsAPI from '../lib/api/posts';\r\n\r\nconst [\r\n  LIST_POSTS,\r\n  LIST_POSTS_SUCCESS,\r\n  LIST_POSTS_FAILURE,\r\n] = createRequestActionTypes('posts/LIST_POSTS');\r\n\r\nexport const listPosts = createAction(\r\n  LIST_POSTS,\r\n  ({ tag, username, page }) => ({\r\n    tag,\r\n    username,\r\n    page,\r\n  }),\r\n);\r\n\r\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.listPosts);\r\nexport function* postsSaga() {\r\n  yield takeLatest(LIST_POSTS, listPostsSaga);\r\n}\r\n\r\nconst initialState = {\r\n  posts: null,\r\n  error: null,\r\n  lastPage: 1,\r\n};\r\n\r\nconst posts = handleActions(\r\n  {\r\n    [LIST_POSTS_SUCCESS]: (state, { payload: posts, meta: response }) => ({\r\n      ...state,\r\n      posts,\r\n      lastPage: parseInt(response.headers['last-page'], 10), // 문자 열은 숫자로 변환\r\n    }),\r\n    [LIST_POSTS_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default posts;\r\n","import client from './client';\r\nimport qs from 'qs';\r\n// qs : 쿼리 값을 더 편리하게 생성하고 JSON으로 변환 할 수 있다.\r\n\r\nexport const writePost = ({ title, body, tags }) =>\r\n  client.post('/api/posts', { title, body, tags });\r\n\r\nexport const readPost = (id) => client.get(`/api/posts/${id}`);\r\n\r\nexport const listPosts = ({ page, username, tag }) => {\r\n  const queryString = qs.stringify({\r\n    page,\r\n    username,\r\n    tag,\r\n  });\r\n  return client.get(`/api/posts?${queryString}`);\r\n};\r\nexport const updatePost = ({ id, title, body, tags }) =>\r\n  client.patch(`/api/posts/${id}`, {\r\n    title,\r\n    body,\r\n    tags,\r\n  });\r\n\r\nexport const removePost = (id) => client.delete(`/api/posts/${id}`);\r\n","import React, { useEffect } from 'react';\r\nimport qs from 'qs';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PostList from '../../components/post/PostList';\r\nimport { listPosts } from '../../modules/posts';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst PostListContainer = ({ location, match }) => {\r\n  const dispatch = useDispatch();\r\n  const { posts, error, loading, user } = useSelector(\r\n    ({ posts, loading, user }) => ({\r\n      posts: posts.posts,\r\n      error: posts.error,\r\n      loading: loading['post/LIST_POSTS'],\r\n      user: user.user,\r\n    }),\r\n  );\r\n  useEffect(() => {\r\n    const { username } = match.params;\r\n    const { tag, page } = qs.parse(location.search, {\r\n      ignoreQueryPrefix: true,\r\n    });\r\n    dispatch(listPosts({ tag, username, page }));\r\n  }, [dispatch, location.search, match.params]);\r\n  return (\r\n    <PostList\r\n      loading={loading}\r\n      error={error}\r\n      posts={posts}\r\n      showWriteButton={user} // 현재 로그인 중인 사용자의 정보를 지니고 있는 user 객체로 설정\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(PostListContainer);\r\n","import React from 'react';\r\nimport HeaderContainer from '../containers/common/HeaderContainer';\r\nimport PaginationContainer from '../containers/posts/PaginationContainer';\r\nimport PostListContainer from '../containers/posts/PostListContainer';\r\n\r\nconst PostListPage = () => {\r\n  return (\r\n    <>\r\n      <HeaderContainer />\r\n      <PostListContainer />\r\n      <PaginationContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostListPage;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nconst [\r\n  READ_POST,\r\n  READ_POST_SUCCESS,\r\n  READ_POST_FAILURE,\r\n] = createRequestActionTypes('post/READ_POST');\r\nconst UNLOAD_POST = 'post/UNLOAD_POST'; // 페이지에서 벗어날 때 리덕스 상태의 데이터 비우기\r\n\r\nexport const readPost = createAction(READ_POST, (id) => id);\r\nexport const unloadPost = createAction(UNLOAD_POST);\r\n\r\nconst readPostSaga = createRequestSaga(READ_POST, postsAPI.readPost);\r\nexport function* postSaga() {\r\n  yield takeLatest(READ_POST, readPostSaga);\r\n}\r\n\r\nconst initialState = {\r\n  post: null,\r\n  error: null,\r\n};\r\n\r\nconst post = handleActions(\r\n  {\r\n    [READ_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    [READ_POST_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [UNLOAD_POST]: () => initialState,\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default post;\r\n","import React from 'react';\r\nimport { Helmet } from 'react-helmet-async';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport Responsive from '../common/Responsive';\r\nimport SubInfo from '../common/SubInfo';\r\nimport Tags from '../common/Tags';\r\n\r\nconst PostViewerBlock = styled(Responsive)`\r\n  margin-top: 4rem;\r\n`;\r\n\r\nconst PostHead = styled.div`\r\n  border-bottom: 1px solid ${palette.gray[2]};\r\n  padding-bottom: 3rem;\r\n  margin-bottom: 3rem;\r\n  h1 {\r\n    font-size: 3rem;\r\n    line-height: 1.5;\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nconst PostContent = styled.div`\r\n  font-size: 1.3125rem;\r\n  color: ${palette.gray[8]};\r\n`;\r\n\r\nconst PostViewer = ({ post, error, loading, actionButtons }) => {\r\n  // 에러 발생시\r\n  if (error) {\r\n    if (error.response && error.response.status === 404) {\r\n      return <PostViewerBlock>존재 하지 않는 포스트입니다.</PostViewerBlock>;\r\n    }\r\n    return <PostViewerBlock>오류 발생</PostViewerBlock>;\r\n  }\r\n\r\n  // 로딩 중이거나 아직 포스트 데이터가 없을 때\r\n  if (loading || !post) {\r\n    return null;\r\n  }\r\n  const { title, body, user, publishedDate, tags } = post;\r\n  return (\r\n    <PostViewerBlock>\r\n      <PostHead>\r\n        <Helmet>\r\n          <title>{title} - REACTERS</title>\r\n        </Helmet>\r\n        <h1>{title}</h1>\r\n        <SubInfo\r\n          username={user.username}\r\n          publishedDate={publishedDate}\r\n          hasMarginTop\r\n        />\r\n        <Tags tags={tags} />\r\n      </PostHead>\r\n      {actionButtons}\r\n      <PostContent\r\n        dangerouslySetInnerHTML={{ __html: body }} // html 적용하기위해\r\n      />\r\n    </PostViewerBlock>\r\n  );\r\n};\r\n\r\nexport default PostViewer;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from './Button';\r\n\r\nconst Fullscreen = styled.div`\r\n  position: fixed;\r\n  z-index: 30;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.25);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\nconst AskModalBlock = styled.div`\r\n  width: 320px;\r\n  background: white;\r\n  padding: 1.5rem;\r\n  border-radius: 4px;\r\n  box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.125);\r\n  h2 {\r\n    margin-top: 0;\r\n    margin-bottom: 1rem;\r\n  }\r\n  p {\r\n    margin-bottom: 3rem;\r\n  }\r\n  .buttons {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n  }\r\n`;\r\n\r\nconst StyledButton = styled(Button)`\r\n  height: 2rem;\r\n  & + & {\r\n    margin-left: 0.75rem;\r\n  }\r\n`;\r\n\r\nconst AskModal = ({\r\n  visible,\r\n  title,\r\n  description,\r\n  confirmText = '확인',\r\n  cancelText = '취소',\r\n  onConfirm,\r\n  onCancel,\r\n}) => {\r\n  if (!visible) return null;\r\n  return (\r\n    <Fullscreen>\r\n      <AskModalBlock>\r\n        <h2>{title}</h2>\r\n        <p>{description}</p>\r\n        <div className=\"buttons\">\r\n          <StyledButton onClick={onCancel}>{cancelText}</StyledButton>\r\n          <StyledButton cyan onClick={onConfirm}>\r\n            {confirmText}\r\n          </StyledButton>\r\n        </div>\r\n      </AskModalBlock>\r\n    </Fullscreen>\r\n  );\r\n};\r\n\r\nexport default AskModal;\r\n","import React from 'react';\r\nimport AskModal from '../common/AskModal';\r\n\r\nconst AskRemoveModal = ({ visible, onConfirm, onCancel }) => {\r\n  return (\r\n    <AskModal\r\n      visible={visible}\r\n      title=\"포스트 삭제\"\r\n      description=\"포스트를 정말 삭제하시겠습니까?\"\r\n      confirmText=\"삭제\"\r\n      onConfirm={onConfirm}\r\n      onCancel={onCancel}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AskRemoveModal;\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport AskRemoveModal from './AskRemoveModal';\r\n\r\nconst PostActionButtonsBlock = styled.div`\r\n  display: fex;\r\n  justify-content: flex-end;\r\n  margin-bottom: 2rem;\r\n  margin-top: -1.5rem;\r\n`;\r\n\r\nconst ActionButton = styled.button`\r\n    padding: 0.25rem 0.5rem;\r\n    border-radius: 4px;\r\n    color: ${palette.gray[6]};\r\n    font-weight: bold;\r\n    border: none;\r\n    outline: none;\r\n    font-size: 0.875rem;\r\n    cursor: pointer;\r\n    &:hover {\r\n        background: ${palette.gray[1]}\r\n        color: ${palette.gray[7]};\r\n    }\r\n    & + & {\r\n        margin-left: 0.25rem;\r\n    }\r\n`;\r\n\r\nconst PostActionButtons = ({ onEdit, onRemove }) => {\r\n  const [modal, setModal] = useState(false);\r\n  const onRemoveClick = () => {\r\n    setModal(true);\r\n  };\r\n  const onCancel = () => {\r\n    setModal(false);\r\n  };\r\n  const onConfirm = () => {\r\n    setModal(false);\r\n    onRemove();\r\n  };\r\n  return (\r\n    <>\r\n      <PostActionButtonsBlock>\r\n        <ActionButton onClick={onEdit}>수정</ActionButton>\r\n        <ActionButton onClick={onRemoveClick}>삭제</ActionButton>\r\n      </PostActionButtonsBlock>\r\n      <AskRemoveModal\r\n        visible={modal}\r\n        onConfirm={onConfirm}\r\n        onCancel={onCancel}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostActionButtons;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst INITIALIZE = 'write/INITIALIZE'; // 모든 내용 초기화\r\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; // 특정 key 값 바꾸기\r\nconst [\r\n  WRITE_POST,\r\n  WRITE_POST_SUCCESS,\r\n  WRITE_POST_FAILURE,\r\n] = createRequestActionTypes('write/WRITE_POST'); // 포스트 작성\r\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST';\r\nconst [\r\n  UPDATE_POST,\r\n  UPDATE_POST_SUCCESS,\r\n  UPDATE_POST_FAILURE,\r\n] = createRequestActionTypes('write/UPDATE_POST'); // 포스트 수정\r\n\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\r\n  key,\r\n  value,\r\n}));\r\nexport const writePost = createAction(WRITE_POST, ({ title, body, tags }) => ({\r\n  title,\r\n  body,\r\n  tags,\r\n}));\r\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, (post) => post);\r\nexport const updatePost = createAction(\r\n  UPDATE_POST,\r\n  ({ id, title, body, tags }) => ({\r\n    id,\r\n    title,\r\n    body,\r\n    tags,\r\n  }),\r\n);\r\n\r\n// saga 생성\r\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\r\nconst updatePostSaga = createRequestSaga(UPDATE_POST, postsAPI.updatePost);\r\n\r\nexport function* writeSaga() {\r\n  yield takeLatest(WRITE_POST, writePostSaga);\r\n  yield takeLatest(UPDATE_POST, updatePostSaga);\r\n}\r\n\r\nconst initialState = {\r\n  title: '',\r\n  body: '',\r\n  tags: [],\r\n  post: null,\r\n  postError: null,\r\n  originalPostId: null,\r\n};\r\n\r\nconst write = handleActions(\r\n  {\r\n    [INITIALIZE]: (state) => initialState, // initialState를 넣으면 초기상태로 바뀜\r\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n      ...state,\r\n      [key]: value, // 특정 key 값을 업데이트\r\n    }),\r\n    [WRITE_POST]: (state) => ({\r\n      ...state,\r\n      // post와 postError를 초기화\r\n      post: null,\r\n      postError: null,\r\n    }),\r\n    // 포스트 작성 성공\r\n    [WRITE_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    // 포스트 작성 실패\r\n    [WRITE_POST_FAILURE]: (state, { payload: postError }) => ({\r\n      ...state,\r\n      postError,\r\n    }),\r\n    [SET_ORIGINAL_POST]: (state, { payload: post }) => ({\r\n      ...state,\r\n      title: post.title,\r\n      body: post.body,\r\n      tags: post.tags,\r\n      originalPostId: post._id,\r\n    }),\r\n    [UPDATE_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    [UPDATE_POST_FAILURE]: (state, { payload: postError }) => ({\r\n      ...state,\r\n      postError,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default write;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { readPost, unloadPost } from '../../modules/post';\r\nimport PostViewer from '../../components/post/PostViewer';\r\nimport PostActionButtons from '../../components/post/PostActionButtons';\r\nimport { setOriginalPost } from '../../modules/write';\r\nimport { removePost } from '../../lib/api/posts';\r\n\r\nconst PostViewerContainer = ({ match, history }) => {\r\n  // 처음 마운트될 때 포스트 읽기 API 요청\r\n  const { postId } = match.params;\r\n  const dispatch = useDispatch();\r\n  const { post, error, loading, user } = useSelector(\r\n    ({ post, loading, user }) => ({\r\n      post: post.post,\r\n      error: post.error,\r\n      loading: loading['post/READ_POST'],\r\n      user: user.user,\r\n    }),\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(readPost(postId));\r\n    // 언마운트 될때 리덕스에서 포스트 데이터 없애기\r\n    return () => {\r\n      dispatch(unloadPost());\r\n    };\r\n  }, [dispatch, postId]);\r\n\r\n  const onEdit = () => {\r\n    dispatch(setOriginalPost(post));\r\n    history.push('/write');\r\n  };\r\n\r\n  const onRemove = async () => {\r\n    try {\r\n      await removePost(postId);\r\n      history.push('/');\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  const ownPost = (user && user._id) === (post && post.user._id);\r\n  return (\r\n    <PostViewer\r\n      post={post}\r\n      loading={loading}\r\n      error={error}\r\n      actionButtons={\r\n        ownPost && <PostActionButtons onEdit={onEdit} onRemove={onRemove} />\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(PostViewerContainer);\r\n","import React from 'react';\r\nimport HeaderContainer from '../containers/common/HeaderContainer';\r\nimport PostViewerContainer from '../containers/post/PostViewerContainer';\r\n\r\nconst PostPage = () => {\r\n  return (\r\n    <>\r\n      <HeaderContainer />\r\n      <PostViewerContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostPage;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeField, initializeForm, register } from '../../modules/auth';\r\nimport AuthForm from '../../components/auth/AuthForm';\r\nimport { check } from '../../modules/user';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst RegisterForm = ({ history }) => {\r\n  const [error, setError] = useState(null);\r\n  const dispatch = useDispatch();\r\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\r\n    form: auth.register,\r\n    auth: auth.auth,\r\n    authError: auth.authError,\r\n    user: user.user,\r\n  }));\r\n  // 인풋 변경 이벤트 핸들러\r\n  const onChange = (e) => {\r\n    const { value, name } = e.target;\r\n    dispatch(\r\n      changeField({\r\n        form: 'register',\r\n        key: name,\r\n        value,\r\n      }),\r\n    );\r\n  };\r\n\r\n  // 폼 등록 이벤트 핸들러\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { username, password, passwordConfirm } = form;\r\n    // 하나라도 비어있다면\r\n    if ([username, password, passwordConfirm].includes('')) {\r\n      setError('빈 칸을 모두 입력하세요.');\r\n      return;\r\n    }\r\n    // 비밀번호가 일치하지 않는다면\r\n    if (password !== passwordConfirm) {\r\n      setError('비밀번호가 일치하지 않습니다.');\r\n      dispatch(changeField({ form: 'register', key: 'password', value: '' }));\r\n      dispatch(\r\n        changeField({ form: 'register', key: 'passwordConfirm', value: '' }),\r\n      );\r\n      return;\r\n    }\r\n    dispatch(register({ username, password }));\r\n  };\r\n\r\n  // 컴포넌트가 처음 렌더링 될 때 form 을 초기화함\r\n  useEffect(() => {\r\n    dispatch(initializeForm('register'));\r\n  }, [dispatch]);\r\n\r\n  // 회원가입 성공 / 실패 처리\r\n  useEffect(() => {\r\n    if (authError) {\r\n      // 계정명이 이미 존재할 때\r\n      if (authError.response.status === 409) {\r\n        setError('이미 존재하는 계정명입니다.');\r\n        return;\r\n      }\r\n      // 기타 이유\r\n      setError('회원가입 실패');\r\n      return;\r\n    }\r\n\r\n    if (auth) {\r\n      console.log('회원가입 성공');\r\n      console.log(auth);\r\n      dispatch(check());\r\n    }\r\n  }, [auth, authError, dispatch]);\r\n\r\n  // user 값이 잘 설정되었는지 확인\r\n  useEffect(() => {\r\n    if (user) {\r\n      console.log('check API 성공');\r\n      console.log(user);\r\n      history.push('/'); // 홈 화면으로 이동\r\n      try {\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n      } catch (e) {\r\n        console.log('localStorage is not working');\r\n      }\r\n    }\r\n  }, [history, user]);\r\n\r\n  return (\r\n    <AuthForm\r\n      type=\"register\"\r\n      form={form}\r\n      onChange={onChange}\r\n      onSubmit={onSubmit}\r\n      error={error}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(RegisterForm);\r\n","import React from 'react';\r\n\r\nimport AuthTemplate from '../components/auth/AuthTemplate';\r\nimport RegisterForm from '../containers/auth/RegisterForm';\r\n\r\nconst RegisterPage = () => {\r\n  return (\r\n    <AuthTemplate>\r\n      <RegisterForm />\r\n    </AuthTemplate>\r\n  );\r\n};\r\n\r\nexport default RegisterPage;\r\n","import Quill from 'quill';\r\nimport React, { useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport Responsive from '../common/Responsive';\r\nimport 'quill/dist/quill.bubble.css';\r\n\r\nconst EditorBlock = styled(Responsive)`\r\n  /* 페이지 위 아래 여백 지정 */\r\n  padding-top: 5rem;\r\n  padding-bottom: 5rem;\r\n`;\r\nconst TitleInput = styled.input`\r\n  font-size: 3rem;\r\n  outline: none;\r\n  padding-bottom: 0.5rem;\r\n  border: none;\r\n  border-bottom: 1px solid ${palette.gray[4]};\r\n  margin-bottom: 2rem;\r\n  width: 100%;\r\n`;\r\n\r\nconst QuillWrapper = styled.div`\r\n  /*최소 크기 지정 밑 padding 제거 */\r\n  .ql-editor {\r\n    padding: 0;\r\n    min-height: 320px;\r\n    font-size: 1.125rem;\r\n    line-height: 1.5;\r\n  }\r\n  .ql-editor.ql-blank::before {\r\n    left: 0px;\r\n  }\r\n`;\r\n\r\nconst Editor = ({ title, body, onChangeField }) => {\r\n  const quillElement = useRef(null); // Quill을 적용할 DivElement 설정\r\n  const quillInstance = useRef(null); // Quill 인스턴스를 설정\r\n\r\n  useEffect(() => {\r\n    quillInstance.current = new Quill(quillElement.current, {\r\n      theme: 'bubble',\r\n      placeholder: '내용을 작성하세요...',\r\n      modules: {\r\n        // 더많은 옵션\r\n        // https://quilljs.com/docs/modules/toolbar/ 참고\r\n        toolbar: [\r\n          [{ header: '1' }, { header: '2' }],\r\n          ['bold', 'italic', 'underline', 'strike'],\r\n          [{ list: 'ordered' }, { list: 'bullet' }],\r\n          ['blockquote', 'code-block', 'link', 'image'],\r\n        ],\r\n      },\r\n    });\r\n\r\n    // quill에 text-change 이벤트 핸들러 등록\r\n    // 참고 : https://quilljs.com/docs/api/#event\r\n    const quill = quillInstance.current;\r\n    quill.on('text-change', (delta, oldDelta, source) => {\r\n      if (source === 'user') {\r\n        onChangeField({ key: 'body', value: quill.root.innerHTML });\r\n      }\r\n    });\r\n  }, [onChangeField]);\r\n\r\n  const mounted = useRef(false);\r\n  useEffect(() => {\r\n    if (mounted.current) return;\r\n    mounted.current = true;\r\n    quillInstance.current.root.innerHTML = body;\r\n  }, [body]);\r\n\r\n  const onChangeTitle = (e) => {\r\n    onChangeField({ key: 'title', value: e.target.value });\r\n  };\r\n  return (\r\n    <EditorBlock>\r\n      <TitleInput\r\n        placeholder=\"제목을 입력하세요\"\r\n        onChange={onChangeTitle}\r\n        value={title}\r\n      />\r\n      <QuillWrapper>\r\n        <div ref={quillElement} />\r\n      </QuillWrapper>\r\n    </EditorBlock>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import React, { useCallback, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Editor from '../../components/write/Editor';\r\n\r\nimport { changeField, initialize } from '../../modules/write';\r\n\r\n// title 값과 body 값을 리덕스 스토어에서 불러와 Editor에 전달해 줌\r\n\r\nconst EditorContainer = () => {\r\n  const dispatch = useDispatch();\r\n  const { title, body } = useSelector(({ write }) => ({\r\n    title: write.title,\r\n    body: write.body,\r\n  }));\r\n\r\n  const onChangeField = useCallback(\r\n    (payload) => dispatch(changeField(payload)),\r\n    [dispatch],\r\n  );\r\n  // 언마운트될 때 초기화, 사용자가  페이지 이동할대 초기화 하기 위해\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch(initialize());\r\n    };\r\n  }, [dispatch]);\r\n\r\n  return <Editor onChangeField={onChangeField} title={title} body={body} />;\r\n};\r\n\r\nexport default EditorContainer;\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\n\r\nconst TagBoxBlock = styled.div`\r\n  width: 100%;\r\n  border-top: 1px solid ${palette.gray[2]};\r\n  padding-top: 2rem;\r\n\r\n  h4 {\r\n    color: ${palette.gray[8]};\r\n    margin-top: 0;\r\n    margin-bottom: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst TagForm = styled.form`\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n  display: flex;\r\n  width: 256px;\r\n  border: 1px solid ${palette.gray[9]}; /* 스타일 초기화 */\r\n  input,\r\n  button {\r\n    outline: none;\r\n    border: none;\r\n    font-size: 1rem;\r\n  }\r\n\r\n  input {\r\n    padding: 0.5rem;\r\n    flex: 1;\r\n    min-width: 0;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n    padding-right: 1rem;\r\n    padding-left: 1rem;\r\n    border: none;\r\n    background: ${palette.gray[8]};\r\n    color: white;\r\n    font-weight: bold;\r\n    &:hover {\r\n      background: ${palette.gray[6]};\r\n    }\r\n  }\r\n`;\r\n\r\nconst Tag = styled.div`\r\n  color: ${palette.gray[6]};\r\n  cursor: pointer;\r\n  &:hover {\r\n    opacity: 0.5;\r\n  }\r\n`;\r\n\r\nconst TagListBlock = styled.div`\r\n  display: flex;\r\n  margin-top: 0.5rem;\r\n`;\r\n\r\n//react MEMO 사용하여 tag 값이 바뀔 때만 리렌더링 되도록 설정\r\nconst TagItem = React.memo(({ tag, onRemove }) => (\r\n  <Tag onClick={() => onRemove(tag)}>#{tag}</Tag>\r\n));\r\n\r\nconst TagList = React.memo(({ tags, onRemove }) => (\r\n  <TagListBlock>\r\n    {tags.map((tag) => (\r\n      <TagItem key={tag} tag={tag} onRemove={onRemove} />\r\n    ))}\r\n  </TagListBlock>\r\n));\r\n// TagBox 컴포넌트는 input이 바뀔 때, Tag목록이 바뀔때  렌더링 함\r\nconst TagBox = ({ onChangeTags, tags }) => {\r\n  const [input, setInput] = useState('');\r\n  const [localTags, setLocalTags] = useState([]);\r\n\r\n  const insertTag = useCallback(\r\n    (tag) => {\r\n      if (!tag) return; // 공백이라면 추가하지 않음\r\n      if (localTags.includes(tag)) return; // 이미 존재한다면 추가 안함\r\n      const nextTags = [...localTags, tag];\r\n      setLocalTags(nextTags);\r\n      onChangeTags(nextTags);\r\n    },\r\n    [localTags, onChangeTags],\r\n  );\r\n\r\n  const onRemove = useCallback(\r\n    (tag) => {\r\n      const nextTags = localTags.filter((t) => t !== tag);\r\n      setLocalTags(nextTags);\r\n      onChangeTags(nextTags);\r\n    },\r\n    [localTags, onChangeTags],\r\n  );\r\n\r\n  const onChange = useCallback((e) => {\r\n    setInput(e.target.value);\r\n  }, []);\r\n\r\n  const onSubmit = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      insertTag(input.trim()); // 앞 뒤 공백을 제거 후 등록\r\n      setInput(''); // input 초기화\r\n    },\r\n    [input, insertTag],\r\n  );\r\n\r\n  // tags 값이 바뀔 때\r\n  useEffect(() => {\r\n    setLocalTags(tags);\r\n  }, [tags]);\r\n  return (\r\n    <TagBoxBlock>\r\n      <h4>태그</h4>\r\n      <TagForm onSubmit={onSubmit}>\r\n        <input\r\n          placeholder=\"태그를 입력하세요\"\r\n          value={input}\r\n          onChange={onChange}\r\n        />\r\n        <button type=\"submit\">추가</button>\r\n      </TagForm>\r\n      <TagList tags={localTags} onRemove={onRemove} />\r\n    </TagBoxBlock>\r\n  );\r\n};\r\n\r\nexport default TagBox;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport TagBox from '../../components/write/TagBox';\r\nimport { changeField } from '../../modules/write';\r\n\r\nconst TagBoxContainer = () => {\r\n  const dispatch = useDispatch();\r\n  const tags = useSelector((state) => state.write.tags);\r\n\r\n  const onChangeTags = (nextTags) => {\r\n    dispatch(\r\n      changeField({\r\n        key: 'tags',\r\n        value: nextTags,\r\n      }),\r\n    );\r\n  };\r\n  return <TagBox onChangeTags={onChangeTags} tags={tags} />;\r\n};\r\n\r\nexport default TagBoxContainer;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from '../common/Button';\r\n\r\nconst WriteActionButtonBlock = styled.div`\r\n  margin-top: 1rem;\r\n  margin-bottom: 3rem;\r\n  button + button {\r\n    margin-left: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst StyledButton = styled(Button)`\r\n  height: 2.125rem;\r\n  & + & {\r\n    margin-left: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst WriteActionButton = ({ onPublish, onCancel, isEdit }) => {\r\n  return (\r\n    <WriteActionButtonBlock>\r\n      <StyledButton cyan onClick={onPublish}>\r\n        포스트 {isEdit ? '수정' : '등록'}\r\n      </StyledButton>\r\n      <StyledButton onClick={onCancel}>취소</StyledButton>\r\n    </WriteActionButtonBlock>\r\n  );\r\n};\r\n\r\nexport default WriteActionButton;\r\n","import React, { useEffect } from 'react';\r\nimport WriteActionButton from '../../components/write/WriteActionButton';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { writePost, updatePost } from '../../modules/write';\r\n\r\n// 포스트 등록을 누르면 현재 리덕스 스토어 안에 들어 있는 값을 사용하여 새 포스트 작성\r\n// originalPostId 값이 존재 하면 writePost 대신 updatePost 액션 생성 함수를 사용하도록\r\nconst WriteActionButtonsContainer = ({ history }) => {\r\n  const dispatch = useDispatch();\r\n  const { title, body, tags, post, postError, originalPostId } = useSelector(\r\n    ({ write }) => ({\r\n      title: write.title,\r\n      body: write.body,\r\n      tags: write.tags,\r\n      post: write.post,\r\n      postError: write.postError,\r\n      originalPostId: write.originalPostId,\r\n    }),\r\n  );\r\n\r\n  // 포스트 등록\r\n  const onPublish = () => {\r\n    if (originalPostId) {\r\n      dispatch(updatePost({ title, body, tags, id: originalPostId }));\r\n      return;\r\n    }\r\n    dispatch(\r\n      writePost({\r\n        title,\r\n        body,\r\n        tags,\r\n      }),\r\n    );\r\n  };\r\n\r\n  // 취소\r\n  const onCancel = () => {\r\n    history.goback();\r\n  };\r\n\r\n  // 성공 , 실패 시 할 작업\r\n  useEffect(() => {\r\n    if (post) {\r\n      const { _id, user } = post;\r\n      history.push(`/@${user.username}/${_id}`); // 해당 경로로 이동\r\n    }\r\n    if (postError) {\r\n      console.log(postError);\r\n    }\r\n  }, [history, post, postError]);\r\n  return (\r\n    <WriteActionButton\r\n      onPublish={onPublish}\r\n      onCancel={onCancel}\r\n      isEdit={!!originalPostId} // originalPostId 존재 유무에 따라 버튼 이름을 수정 또는 등록으로 설정\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(WriteActionButtonsContainer);\r\n","import React from 'react';\r\nimport { Helmet } from 'react-helmet-async';\r\nimport Responsive from '../components/common/Responsive';\r\nimport EditorContainer from '../containers/write/EditorContainer';\r\nimport TagBoxContainer from '../containers/write/TagBoxContainer';\r\nimport WriteActionButtonsContainer from '../containers/write/WriteActionButtonsContainer';\r\n\r\nconst WritePage = () => {\r\n  return (\r\n    <Responsive>\r\n      <Helmet>\r\n        <title>글 작성하기 - REACTERS</title>\r\n      </Helmet>\r\n      <EditorContainer />\r\n      <TagBoxContainer />\r\n      <WriteActionButtonsContainer />\r\n    </Responsive>\r\n  );\r\n};\r\n\r\nexport default WritePage;\r\n","import React from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { Route } from 'react-router-dom';\nimport LoginPage from './pages/LoginPage';\nimport PostListPage from './pages/PostListPage';\nimport PostPage from './pages/PostPage';\nimport RegisterPage from './pages/RegisterPage';\nimport WritePage from './pages/WritePage';\n\nconst App = () => {\n  return (\n    <>\n      <Helmet>\n        <title>REACT</title>\n      </Helmet>\n      {/* path에 배열을 넣어주면 한 라우트 컴포넌트에 여러 개의 경로를 쉽게 설정 가능 */}\n      <Route component={PostListPage} path={['/@:username', '/']} exact />\n      <Route component={LoginPage} path={'/login'} />\n      <Route component={RegisterPage} path={'/register'} />\n      <Route component={WritePage} path={'/write'} />\n      <Route component={PostPage} path={'/@:username/:postId'} />\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux';\r\nimport { all } from 'redux-saga/effects';\r\nimport auth, { authSaga } from './auth';\r\nimport loading from './loading';\r\nimport user, { userSaga } from './user';\r\nimport write, { writeSaga } from './write';\r\nimport post, { postSaga } from './post';\r\nimport posts, { postsSaga } from './posts';\r\n\r\nconst rootReducer = combineReducers({\r\n  auth,\r\n  loading,\r\n  user,\r\n  write,\r\n  post,\r\n  posts,\r\n});\r\n\r\nexport function* rootSaga() {\r\n  yield all([authSaga(), userSaga(), writeSaga(), postSaga(), postsSaga()]);\r\n}\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer, { rootSaga } from './modules';\nimport createSagaMiddleware from 'redux-saga';\nimport { tempSetUser, check } from './modules/user';\nimport { HelmetProvider } from 'react-helmet-async';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(sagaMiddleware)),\n);\nfunction loadUser() {\n  try {\n    const user = localStorage.getItem('user');\n    if (!user) return; // 로그인 상태가 아니라면 아무것도 안함\n\n    store.dispatch(tempSetUser(user));\n    store.dispatch(check());\n  } catch (e) {\n    console.log(e);\n  }\n}\nsagaMiddleware.run(rootSaga);\nloadUser();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <HelmetProvider>\n          <App />\n        </HelmetProvider>\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}